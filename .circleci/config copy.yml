# steps:
    #   # Checkout code from git
    #   - checkout
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         # your code here
    #         apk add --update --no-cache tar gzip nodejs npm curl aws-cli
    #   - run:
    #       name: Get backend url and Backend smoke test
    #       command: |
    #         # your code here
    #         export BACKEND_IP=$(aws ec2 describe-instances \
    #         --query "Reservations[*].Instances[*].[PublicIpAddress]" \
    #         --filters "Name=tag:Name,Value=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
    #         --output test)
    #         echo ${BACKEND_IP}

    #         export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')

    #         echo $BACKEND
    #         export API_URL="http://${BACKEND}:3030"
    #         echo "API_URL=${API_URL}"

    #         echo "sleeping for 1 minute"
    #         sleep 60

    #         if curl -v "${API_URL}/api/status" | grep "ok"
    #         then
    #           return 0
    #         else
    #           return 1
    #         fi
    #   - run:
    #       name: Frontend smoke test.
    #       command: |
    #         # your code here
    #         URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"  
    #         echo ${URL} 
    #         if curl -s ${URL} | grep "Welcome"
    #         then
    #             # Change this to 0 after the job fails
    #           return 1
    #         else
    #           return 1
    #         fi
    #   # Here's where you will add some code to rollback on failure
    #   - destroy-environment
    #   - revert-migrations
    - 
    - 
    # cloudfront-update:
    #   docker:
    #     # Docker image here that supports AWS CLI
    #     - image: amazon/aws-cli
    #   steps:
    #     # Checkout code from git
    #     - checkout
    #     - run:
    #         name: Install dependencies
    #         command: |
    #           # your code here
    #           yum install tar gzip -y
    #     - run:
    #         name: Get Old stack workflow id
    #         command: |
    #           export OldWorkflowID=$(aws cloudformation \
    #             list-exports --query "Exports[?Name==\`WorkflowID`].Value" \
    #             --no-paginate --output text | grep -o '[^-]*$' )
    #           echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
    #           cat ~/project/OldWorkflowID.txt
    #     - persist_to_workspace:
    #         root: ~/
    #         paths:
    #           - project/OldWorkflowID.txt
    #     - run:
    #         name: Update cloudfront distribution
    #         command: |
    #           # your code here
    #           aws cloudformation deploy \
    #             --template-file .circleci/files/cloudfront.yml \
    #             --stack-name InitialStack \
    #             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
    #             --tags project=udapeople
    #           echo OldWorkflowID: $(cat ~/project/OldWorkflowID.txt)
    #           echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
    #     # Here's where you will add some code to rollback on failure
    #     - destroy-environment
    #     - revert-migrations 

    # cleanup:
    #     docker:
    #       # Docker image here
    #       - image: amazon/aws-cli
    #     steps:
    #       # Checkout code from git
    #       - chechout
    #       - run:
    #           name: Install Dependencies
    #           command: |
    #             yum install tar gzip -y
    #       - attach_workspace:
    #           at: ~/
    #       - run:
    #           name: Get old stack workflow id
    #           command: |
    #             # your code here
    #             export STACKS=($(aws cloudformation list-stacks \
    #               --query "StackSummaries[*].StackName" \
    #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
    #             echo Stack names: "${STACKS[@]}"
    #             cat ~/project/OldWorkflowID.txt
    #             export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
    #             echo OldWorkflowID: "${OldWorkflowID}"
    #       - run:
    #           name: Remove old stacks and files
    #           command: |
    #             export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
    #             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
    #             then
    #               # your code here
    #               echo "Deleting old stack"
    #               echo "s3://udapeople-${OldWorkflowID}"
    #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
    #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
    #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
    #               else
    #                 echo "Stack is the latest"
    #             fi
        